#!/opt/anaconda3/envs/geo/bin/python
import argparse

from pydsm.geo import open_tiff as geo_open
from pydsm.geo import save_tiff as geo_save
from pydsm.geo import get_epsg as geo_get_epsg
from pydsm.geo import correct_dtm as geo_correct_dtm
from pydsm.geo import to_ndsm as geo_to_ndsm
from pydsm.geo import reproject as geo_reproject
from pydsm.geo import to_xyz as geo_to_xyz

from pydsm.nda import write_numpy as nda_write

from pydsm.shp import get_epsg as shp_get_epsg


def ndsm(args):
    dsm = geo_open(args.dsm_path)
    dtm = geo_open(args.dtm_path)
    dtm = geo_correct_dtm(dtm) if args.correct_dtm else dtm
    capture_height = args.capture_height if args.capture_height else 60.0
    ndsm = geo_to_ndsm(dsm, dtm, capture_height=capture_height)
    geo_save(ndsm, args.ndsm_path)
    print(f'* Saved to {args.ndsm_path}')


def epsg(args):
    ext = args.path.split('.')[-1]
    if ext == 'shp':
        epsg = shp_get_epsg(args.path)
        print(f'* Shapefile EPSG {epsg}')
    elif ext == 'tif':
        gdal = geo_open(args.path)
        epsg = geo_get_epsg(gdal)
        print(f'* GeoTIFF EPSG {epsg}')
    else:
        epsg = None
        print('* Unknown file format')


def reproject(args):
    epsg = args.epsg if args.epsg else 4326
    save_path = args.save_path if args.save_path else args.path.split('.')[0] + f'_{epsg}.tif'

    gdal = geo_open(args.path)
    source_epsg = geo_get_epsg(gdal)
    print(f'* Reprojecting to EPSG {epsg} from EPSG {source_epsg}')
    reprojected = geo_reproject(gdal, epsg)
    geo_save(reprojected, save_path)
    print(f'* Saved to {save_path}')


def xyz(args):
    print(f'* Warning: The data generated by this command can be very large')
    print(f'* Consider querying the geotiff file directly instead')
    save_path = args.save_path if args.save_path else args.path.split('.')[0] + '.npz'
    gdal = geo_open(args.path)
    epsg = geo_get_epsg(gdal)
    print(f'* Generating XYZ from EPSG {epsg}')
    xyz = geo_to_xyz(gdal)
    nda_write(save_path, data=xyz, metadata={'epsg': epsg})
    print(f'* Saved to {save_path}')


COMMANDS = {
    'ndsm': ndsm,
    'epsg': epsg,
    'reproject': reproject,
    'xyz': xyz,
}


def parser_setup():
    parser = argparse.ArgumentParser(description='PyDSM : DSM, DTM, nDSM & Ortophoto tools')
    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # ndsm command
    parser_ndsm = subparsers.add_parser("ndsm", help="Generate a nDSM from a DSM and DTM")
    parser_ndsm.add_argument("dsm_path", type=str, help="Path to the DSM")
    parser_ndsm.add_argument("dtm_path", type=str, help="Path to the DTM")
    parser_ndsm.add_argument("ndsm_path", type=str, help="Path to the output nDSM")
    parser_ndsm.add_argument("--correct-dtm", action="store_true", help="Correct extreme DTM values")
    parser_ndsm.add_argument("--capture-height", type=float, help="Height of the drone during the capture")

    # epsg command
    parser_epsg = subparsers.add_parser("epsg", help="Get the EPSG code of a file")
    parser_epsg.add_argument("path", type=str, help="Path to the file")

    # reproject command
    parser_reproject = subparsers.add_parser("reproject", help="Reproject a file to a new EPSG code")
    parser_reproject.add_argument("path", type=str, help="Path to the geotiff file")
    parser_reproject.add_argument("--save-path", type=str, help="Path to save the reprojected file")
    parser_reproject.add_argument("--epsg", type=int, help="New EPSG code")

    # xyz command
    parser_xyz = subparsers.add_parser("xyz", help="Generate a XYZ file from a geotiff. Saved as a compressed numpy (.npz)")
    parser_xyz.add_argument("path", type=str, help="Path to the geotiff file")
    parser_xyz.add_argument("--save-path", type=str, help="Path to save the XYZ file")
    
    return parser


def main():
    parser = parser_setup()
    args = parser.parse_args()
    print(args)
    COMMANDS[args.command](args)


if __name__ == "__main__":
    main()

