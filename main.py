#!/opt/anaconda3/envs/geo/bin/python
import argparse
import time
import os
import sys

import imageio.v3 as iio
import numpy as np

import pydsm.geo as geo
import pydsm.nda as nda
import pydsm.shp as shp


"""
- todo : path resolver : './data/dtm.tif'.split('.')[0] -> '' (to be fixed to './data/dtm')

"""


# COMMANDS

def ndsm(args):
    """
    Computes the nDSM from a DSM and DTM
    :param args.dsm_path: str, path to the DSM (mandatory)
    :param args.dtm_path: str, path to the DTM (mandatory)
    :param args.ndsm_path: str, path to save the nDSM (mandatory)
    :param args.correct_dtm: bool, correct extreme DTM values (optional)
    :param args.capture_height: float, height of the drone during the capture (optional) (default: 60.0)
    :return: None (saves the nDSM to disk)
    """
    dsm = geo.open_geotiff(args.dsm_path)
    dtm = geo.open_geotiff(args.dtm_path)
    dtm = geo.correct_dtm(dtm) if args.correct_dtm else dtm
    capture_height = args.capture_height if args.capture_height else 60.0
    ndsm = geo.to_ndsm(dsm, dtm, capture_height=capture_height)
    geo.save_geotiff(ndsm, args.ndsm_path)
    print(f'* Saved to {args.ndsm_path}')


def epsg(args):
    """
    Displays the EPSG code of a file
    :param args.path: str, path to the file (mandatory)
    """
    ext = args.path.split('.')[-1]
    if ext == 'shp':
        epsg = shp.get_epsg(args.path)
        print(f'* Shapefile EPSG {epsg}')
    elif ext == 'tif':
        gdal = geo.open_geotiff(args.path)
        epsg = geo.get_epsg(gdal)
        print(f'* GeoTIFF EPSG {epsg}')
    else:
        epsg = None
        print('* Unknown file format')


def reproject(args):
    """
    Reprojects a geotiff file to a new EPSG code
    :param args.path: str, path to the geotiff file (mandatory)
    :param args.save_path: str, path to save the reprojected file (optional)
    :param args.epsg: int, new EPSG code (optional) (default: 4326)
    :return: None (saves the reprojected file to disk)
    """
    epsg = args.epsg if args.epsg else 4326
    save_path = args.save_path if args.save_path else args.path.split('.')[0] + f'_{epsg}.tif'

    gdal = geo.open_geotiff(args.path)
    source_epsg = geo.get_epsg(gdal)
    print(f'* Reprojecting to EPSG {epsg} from EPSG {source_epsg}')
    reprojected = geo.reproject(gdal, epsg)
    geo.save_geotiff(reprojected, save_path)
    print(f'* Saved to {save_path}')


def xyz(args):
    """
    Calculates the XYZ coordinates from a geotiff file (dtm, dsm, ndsm, etc.)
    Not recommended for large files. Use the geotiff directly instead.
    :param args.path: str, path to the geotiff file (mandatory)
    :param args.save_path: str, path to save the XYZ file (optional)
    :return: None (saves the XYZ file to disk as a compressed numpy file (.npz))
    """
    print(f'* Warning: The data generated by this command can be very large')
    print(f'* Consider querying the geotiff file directly instead')
    save_path = args.save_path if args.save_path else args.path.split('.')[0] + '.npz'
    gdal = geo.open_geotiff(args.path)
    epsg = geo.get_epsg(gdal)
    print(f'* Generating XYZ from EPSG {epsg}')
    xyz = geo.to_xyz(gdal)
    nda.write_numpy(save_path, data=xyz, metadata={'epsg': epsg})
    print(f'* Saved to {save_path}')


def cmap(args):
    cmap = args.cmap if args.cmap else 'viridis'
    save_path = args.save_path if args.save_path else args.path.split('.')[0] + f'_{cmap}.png'
    gdal = geo.open_geotiff(args.path)
    print(f'* Generating {cmap} colormap from {args.path}')
    array = geo.to_ndarray(gdal)
    if np.min(array) == 0.0:
        array_cmap = nda.to_cmap(array, cmap=cmap)
        array_cmap = nda.to_uint8(array_cmap)
    else:
        array_cmap = nda.dsm_to_cmap(array, cmap=cmap)
    iio.imwrite(save_path, array_cmap)
    print(f'* Saved to {save_path}')


# GENERAL COMMANDS

def silent_mode(args):
    if args.silent:
        sys.stdout = open(os.devnull, 'w')


def time_mode(args, t0):
    t1 = time.time()
    if args.time:
        print(f'* Elapsed time: {t1 - t0:.2f} seconds')


# ARGUMENT PARSER SETUP

COMMANDS = {
    'ndsm': ndsm,
    'epsg': epsg,
    'reproject': reproject,
    'xyz': xyz,
    'cmap': cmap,
}


def parser_setup():
    parser = argparse.ArgumentParser(description='PyDSM : DSM, DTM, nDSM & Ortophoto tools')
    parser.add_argument("--silent", action="store_true", help="Silent mode")
    parser.add_argument("--time", action="store_true", help="Displays time elapsed")
    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # ndsm command
    parser_ndsm = subparsers.add_parser("ndsm", help="Generate a nDSM from a DSM and DTM")
    parser_ndsm.add_argument("dsm_path", type=str, help="Path to the DSM")
    parser_ndsm.add_argument("dtm_path", type=str, help="Path to the DTM")
    parser_ndsm.add_argument("ndsm_path", type=str, help="Path to the output nDSM")
    parser_ndsm.add_argument("--correct-dtm", action="store_true", help="Correct extreme DTM values")
    parser_ndsm.add_argument("--capture-height", type=float, help="Height of the drone during the capture")

    # epsg command
    parser_epsg = subparsers.add_parser("epsg", help="Get the EPSG code of a file (GeoTIFF or Shapefile)")
    parser_epsg.add_argument("path", type=str, help="Path to the file")

    # reproject command
    parser_reproject = subparsers.add_parser("reproject", help="Reproject a file to a new EPSG code")
    parser_reproject.add_argument("path", type=str, help="Path to the geotiff file")
    parser_reproject.add_argument("--save-path", type=str, help="Path to save the reprojected file")
    parser_reproject.add_argument("--epsg", type=int, help="New EPSG code")

    # xyz command
    parser_xyz = subparsers.add_parser("xyz", help="Generate a XYZ file from a geotiff as a compressed numpy (.npz)")
    parser_xyz.add_argument("path", type=str, help="Path to the geotiff file")
    parser_xyz.add_argument("--save-path", type=str, help="Path to save the XYZ file")

    # cmap command
    parser_cmap = subparsers.add_parser("cmap", help="Generate a colormap png from a geotiff")
    parser_cmap.add_argument("path", type=str, help="Path to the geotiff file")
    parser_cmap.add_argument("--cmap", type=str, help="Colormap name (default: viridis)")
    parser_cmap.add_argument("--save-path", type=str, help="Path to save the colormap")

    return parser


def main():
    t0 = time.time()
    parser = parser_setup()
    args = parser.parse_args()
    silent_mode(args)
    COMMANDS[args.command](args)
    time_mode(args, t0)


if __name__ == "__main__":
    main()

